---
// MGrid.astro
import MTile from '../components/MTile.astro';
import Patch from '../components/Patch.astro';
import QRCPhoto from '../components/QRCPhoto.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Define types for better type safety
type Testimonial = CollectionEntry<'testimonials'>;
type Photo = CollectionEntry<'qrc_photos'>;

// Define tile properties
type TileProps = {
    color: string;
    rowStart: number;
    colStart: number;
    width: number;
    height: number;
};

// Create discriminated union
type GridItem = (TileProps & { kind: 'testimonial'; content: Testimonial }) | (TileProps & { kind: 'photo'; content: Photo });
// Get data from collections
const testimonials = await getCollection('testimonials');
console.log('testimonials collection:', testimonials);
const pictures = await getCollection('qrc_photos');
console.log('Pictures collection:', pictures);

// Find default entries (for fallbacks)
const defaultTestimonial = testimonials.find((t) => t.slug === 'default') || testimonials[0];
const defaultPhoto = pictures.find((p) => p.slug === 'default') || pictures[0];

// Grid layout configuration
const desktopGrid = [
    { color: 'var(--color-moonstone)', rowStart: 1, colStart: 1, width: 8, height: 7 },
    { color: 'var(--color-bittersweet)', colStart: 9, rowStart: 1, width: 9, height: 7 },
    { color: 'var(--color-asparagus)', colStart: 18, rowStart: 1, width: 7, height: 7 },
    { color: 'var(--color-wine)', colStart: 25, rowStart: 1, width: 7, height: 9 },
    { color: 'var(--color-asparagus)', colStart: 1, rowStart: 8, width: 9, height: 7 },
    { color: 'var(--color-moonstone)', colStart: 10, rowStart: 8, width: 8, height: 8 },
    { color: 'var(--color-bittersweet)', colStart: 18, rowStart: 8, width: 7, height: 7 },
    { color: 'var(--color-moonstone)', colStart: 25, rowStart: 10, width: 7, height: 7 },
    { color: 'var(--color-bittersweet)', colStart: 1, rowStart: 15, width: 9, height: 9 },
    { color: 'var(--color-asparagus)', colStart: 10, rowStart: 16, width: 8, height: 8 },
    { color: 'var(--color-wine)', colStart: 18, rowStart: 15, width: 7, height: 9 },
    { color: 'var(--color-asparagus)', colStart: 25, rowStart: 17, width: 7, height: 7 }
];

// Calculate optimal spacing and offset
const featuredTestimonials = testimonials.filter((t) => t.slug !== 'default').slice(0, 5);
const spacing = Math.ceil(desktopGrid.length / (featuredTestimonials.length + 1));
const offset = featuredTestimonials.length >= 4 ? 0 : 1; // Dynamic offset based on collection size

let testimonialBudget = featuredTestimonials.length;
let nextTestimonialIndex = 0;

const gridContent: GridItem[] = desktopGrid.map((tile, index) => {
    // First check: Is this a valid spot AND do we have budget?
    if ((offset + index) % spacing === 0 && testimonialBudget > 0) {
        testimonialBudget--; // Use up one testimonial
        return {
            ...tile,
            kind: 'testimonial',
            content: featuredTestimonials[nextTestimonialIndex++] // Use next testimonial and increment
        };
    } else {
        return {
            ...tile,
            kind: 'photo',
            content: pictures[index % pictures.length] || defaultPhoto
        };
    }
});
---

<div
    class="grid-container"
    style="display: grid; grid-template-columns: repeat(31, 1fr); grid-auto-rows: 1fr; width: 100%; max-width: 1200px; margin: 5rem auto;"
>
    {
        gridContent.map((item) => (
            <MTile color={item.color} rowStart={item.rowStart} colStart={item.colStart} width={item.width} height={item.height}>
                {item.kind === 'testimonial' ? (
                    <Patch content={item.content} title={item.content.data.author} imagePath={item.content.data.imagePath} alt={item.content.data.alt} />
                ) : (
                    <Patch content={item.content} title={item.content.data.name} imagePath={item.content.data.imagePath} alt={item.content.data.alt} />
                )}
            </MTile>
        ))
    }
</div>
